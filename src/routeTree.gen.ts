/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as MainRouteImport } from './routes/_main'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as MainIndexRouteImport } from './routes/_main/index'
import { Route as MainAboutRouteImport } from './routes/_main/about'
import { Route as AuthRegisterRouteImport } from './routes/_auth/register'
import { Route as AuthLoginRouteImport } from './routes/_auth/login'
import { Route as MainCollectionsCollectionsNameRouteImport } from './routes/_main/collections/$collectionsName'

const MainRoute = MainRouteImport.update({
  id: '/_main',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const MainIndexRoute = MainIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MainRoute,
} as any)
const MainAboutRoute = MainAboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => MainRoute,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any)
const MainCollectionsCollectionsNameRoute =
  MainCollectionsCollectionsNameRouteImport.update({
    id: '/collections/$collectionsName',
    path: '/collections/$collectionsName',
    getParentRoute: () => MainRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/login': typeof AuthLoginRoute
  '/register': typeof AuthRegisterRoute
  '/about': typeof MainAboutRoute
  '/': typeof MainIndexRoute
  '/collections/$collectionsName': typeof MainCollectionsCollectionsNameRoute
}
export interface FileRoutesByTo {
  '/login': typeof AuthLoginRoute
  '/register': typeof AuthRegisterRoute
  '/about': typeof MainAboutRoute
  '/': typeof MainIndexRoute
  '/collections/$collectionsName': typeof MainCollectionsCollectionsNameRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_auth': typeof AuthRouteWithChildren
  '/_main': typeof MainRouteWithChildren
  '/_auth/login': typeof AuthLoginRoute
  '/_auth/register': typeof AuthRegisterRoute
  '/_main/about': typeof MainAboutRoute
  '/_main/': typeof MainIndexRoute
  '/_main/collections/$collectionsName': typeof MainCollectionsCollectionsNameRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/register'
    | '/about'
    | '/'
    | '/collections/$collectionsName'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/register' | '/about' | '/' | '/collections/$collectionsName'
  id:
    | '__root__'
    | '/_auth'
    | '/_main'
    | '/_auth/login'
    | '/_auth/register'
    | '/_main/about'
    | '/_main/'
    | '/_main/collections/$collectionsName'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren
  MainRoute: typeof MainRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_main': {
      id: '/_main'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MainRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_main/': {
      id: '/_main/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof MainIndexRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/about': {
      id: '/_main/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof MainAboutRouteImport
      parentRoute: typeof MainRoute
    }
    '/_auth/register': {
      id: '/_auth/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_main/collections/$collectionsName': {
      id: '/_main/collections/$collectionsName'
      path: '/collections/$collectionsName'
      fullPath: '/collections/$collectionsName'
      preLoaderRoute: typeof MainCollectionsCollectionsNameRouteImport
      parentRoute: typeof MainRoute
    }
  }
}

interface AuthRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface MainRouteChildren {
  MainAboutRoute: typeof MainAboutRoute
  MainIndexRoute: typeof MainIndexRoute
  MainCollectionsCollectionsNameRoute: typeof MainCollectionsCollectionsNameRoute
}

const MainRouteChildren: MainRouteChildren = {
  MainAboutRoute: MainAboutRoute,
  MainIndexRoute: MainIndexRoute,
  MainCollectionsCollectionsNameRoute: MainCollectionsCollectionsNameRoute,
}

const MainRouteWithChildren = MainRoute._addFileChildren(MainRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  MainRoute: MainRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
